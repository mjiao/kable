// Package srv provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package kable

import (
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (DELETE /apps)
	DeleteApps(ctx echo.Context) error
	// (GET /apps)
	GetApps(ctx echo.Context) error
	// (POST /apps)
	PostApps(ctx echo.Context) error
	// Your GET endpoint// (GET /concepts)
	GetConcepts(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteApps converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApps(ctx)
	return err
}

// GetApps converts echo context to params.
func (w *ServerInterfaceWrapper) GetApps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApps(ctx)
	return err
}

// PostApps converts echo context to params.
func (w *ServerInterfaceWrapper) PostApps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApps(ctx)
	return err
}

// GetConcepts converts echo context to params.
func (w *ServerInterfaceWrapper) GetConcepts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConcepts(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/apps", wrapper.DeleteApps)
	router.GET("/apps", wrapper.GetApps)
	router.POST("/apps", wrapper.PostApps)
	router.GET("/concepts", wrapper.GetConcepts)

}
